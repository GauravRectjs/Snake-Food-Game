[{"G:\\reactwebsite\\snakegame\\src\\index.js":"1","G:\\reactwebsite\\snakegame\\src\\App.js":"2","G:\\reactwebsite\\snakegame\\src\\reportWebVitals.js":"3","G:\\reactwebsite\\snakegame\\src\\Button.js":"4","G:\\reactwebsite\\snakegame\\src\\Menu.js":"5","G:\\reactwebsite\\snakegame\\src\\Food.js":"6","G:\\reactwebsite\\snakegame\\src\\Snake.js":"7"},{"size":535,"mtime":1691157829816,"results":"8","hashOfConfig":"9"},{"size":4797,"mtime":1691237562746,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1691157835639,"results":"11","hashOfConfig":"9"},{"size":675,"mtime":1691216728794,"results":"12","hashOfConfig":"9"},{"size":352,"mtime":1691217508660,"results":"13","hashOfConfig":"9"},{"size":218,"mtime":1691217502157,"results":"14","hashOfConfig":"9"},{"size":337,"mtime":1691217493056,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1skuodu",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\reactwebsite\\snakegame\\src\\index.js",[],[],[],"G:\\reactwebsite\\snakegame\\src\\App.js",["39","40","41","42","43","44"],[],"import React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Button from \"./Button\";\nimport Menu from \"./Menu\";\n\nconst getRandomFood = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomFood(),\n  direction: \"RIGHT\",\n  speed: 100,\n  route: \"menu\",\n  snakeDots: [[0, 0], [0, 2]]\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.onSnakeOutOfBounds();\n    this.onSnakeCollapsed();\n    this.onSnakeEats();\n  }\n\n  onKeyDown = e => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 38:\n        this.setState({ direction: \"UP\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n    if (this.state.route === \"game\") {\n      switch (this.state.direction) {\n        case \"RIGHT\":\n          head = [head[0] + 2, head[1]];\n          break;\n        case \"LEFT\":\n          head = [head[0] - 2, head[1]];\n          break;\n        case \"DOWN\":\n          head = [head[0], head[1] + 2];\n          break;\n        case \"UP\":\n          head = [head[0], head[1] - 2];\n          break;\n      }\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    }\n  };\n\n  onSnakeOutOfBounds() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (this.state.route === \"game\") {\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n        this.gameOver();\n      }\n    }\n  }\n\n  onSnakeCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.gameOver();\n      }\n    });\n  }\n\n  onSnakeEats() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomFood() \n      });\n      this.increaseSnake();\n      this.increaseSpeed();\n    }\n  }\n//increase\n  increaseSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 20\n      });\n    }\n  }\n\n  onRouteChange = () => {\n    this.setState({\n      route: \"game\"\n    });\n  };\n\n  gameOver() {\n    alert(`GAME OVER, your score is ${this.state.snakeDots.length - 2}`);\n    this.setState(initialState);\n  }\n\n  onDown = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    head = [head[0], head[1] + 2];\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      direction: \"DOWN\",\n      snakeDots: dots\n    });\n  };\n\n  onUp = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    head = [head[0], head[1] - 2];\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      direction: \"UP\",\n      snakeDots: dots\n    });\n  };\n\n  onRight = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    head = [head[0] + 2, head[1]];\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      direction: \"RIGHT\",\n      snakeDots: dots\n    });\n  };\n\n  onLeft = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    head = [head[0] - 2, head[1]];\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      direction: \"LEFT\",\n      snakeDots: dots\n    });\n  };\n\n  render() {\n    const { route, snakeDots, food } = this.state;\n    return (\n      <div>\n        {route === \"menu\" ? (\n          <div>\n            <Menu onRouteChange={this.onRouteChange} />\n          </div>\n        ) : (\n          <div>\n            <div className=\"game-area\">\n              <Snake snakeDots={snakeDots} />\n              <Food dot={food} />\n            </div>\n            <Button\n              onDown={this.onDown}\n              onLeft={this.onLeft}\n              onRight={this.onRight}\n              onUp={this.onUp}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","G:\\reactwebsite\\snakegame\\src\\reportWebVitals.js",[],[],"G:\\reactwebsite\\snakegame\\src\\Button.js",[],[],"G:\\reactwebsite\\snakegame\\src\\Menu.js",[],[],"G:\\reactwebsite\\snakegame\\src\\Food.js",[],[],"G:\\reactwebsite\\snakegame\\src\\Snake.js",[],[],{"ruleId":"45","severity":1,"message":"46","line":42,"column":5,"nodeType":"47","messageId":"48","endLine":55,"endColumn":6},{"ruleId":"45","severity":1,"message":"46","line":62,"column":7,"nodeType":"47","messageId":"48","endLine":75,"endColumn":8},{"ruleId":"49","severity":1,"message":"50","line":98,"column":19,"nodeType":"51","messageId":"52","endLine":98,"endColumn":21},{"ruleId":"49","severity":1,"message":"50","line":98,"column":40,"nodeType":"51","messageId":"52","endLine":98,"endColumn":42},{"ruleId":"49","severity":1,"message":"50","line":107,"column":17,"nodeType":"51","messageId":"52","endLine":107,"endColumn":19},{"ruleId":"49","severity":1,"message":"50","line":107,"column":39,"nodeType":"51","messageId":"52","endLine":107,"endColumn":41},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]